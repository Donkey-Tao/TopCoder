#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

int f[100001];
class ApplesAndOrangesHard {
public:

	int eatK(int K, int limit) {
		int eated = accumulate(f, f + K, 0);
		int res = 0;
		if (eated != limit) {
			for (int i = 0; i < K; i++) {
				if (!f[i]) {
					f[i] = 1;
					++eated;
					++res;
					if (eated == limit) {
						break;
					}
				}
			}
		}
		return res;
	}

	int maximumApples(int N, int K, vector <int> info) {
		int res = 0;
		sort(info.begin(), info.end());
		int limit = K / 2;

		if (info.empty()) {
			res = (N / K) * limit;
			res += min(limit, N - (N / K) * K);
			return res;
		}

		for (int & x : info) { --x; }




		res = (info[0] / K) * limit;

		memset(f, 0, sizeof(f));
		int startpos = (info[0] / K) * K;
		int endpos = startpos + K;
		bool newcycle = false;

		for (size_t i = 0; i < info.size(); i++) {
			if (!newcycle) {
				if (info[i] < endpos) {
					++res;
					f[ info[i] - startpos ] = 1;
				} else {
					res += eatK(K, limit);
					int prestartpos = startpos;
					startpos = -1;
					for (size_t j = 0; j < info.size(); j++) {
						if (info[j] > prestartpos && info[j] < endpos) {
							startpos = info[j];
							break;
						}
					}
					if (startpos != -1) {
						endpos = startpos + K;
						// memmove and memset
						int offset = startpos - prestartpos;
						int elenum = K - offset;
						memmove(f, f + offset, elenum * sizeof(int));
						memset(f + elenum, 0, (K - elenum) * sizeof(int));
						--i;
					} else {
						// new cycle
						newcycle = true;
						--i;
					}
				}
			} else {
				int t = (min(N, info[i] + 1) - endpos) / K;
				res += t * limit;
				startpos = t * K + endpos;
				endpos = startpos + K;
				newcycle = false;
			}
		}

		if (endpos < N) {
			int t = (N - endpos) / K;
			res += t * limit;
			res += min(limit, (N - endpos) - t * K);
		}

		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, int p3) {
	ApplesAndOrangesHard *obj;
	int answer;
	obj = new ApplesAndOrangesHard();
	clock_t startTime = clock();
	answer = obj->maximumApples(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	if (hasAnswer) {
		res = answer == p3;
	}
	cout << "Test " << testNum << " ";
	if (!res) {
		cout << "failed." << endl;
		cout << "expected: ";
		cout << "\t" << p3 << endl;
		cout << "received: ";
		cout << "\t" << answer << endl;
		cout << "" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "passed.      ";
		cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds";
		cout << "" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	vector <int> p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = 2;
	p2 = {};
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 10;
	p1 = 3;
	p2 = {3,8};
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 9;
	p1 = 4;
	p2 = {1,4};
	p3 = 5;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 9;
	p1 = 4;
	p2 = {2,4};
	p3 = 4;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 23;
	p1 = 7;
	p2 = {3,2,9,1,15,23,20,19};
	p3 = 10;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 1000000000;
	p1 = 17;
	p2 = {2110119,401933834,401933833,10};
	p3 = 470588238;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		cout << "" << endl;
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!

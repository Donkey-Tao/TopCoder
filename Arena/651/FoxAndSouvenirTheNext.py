import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class FoxAndSouvenirTheNext:
    def ableToSplit(self, value):
        impossible = "Impossible";
        possible = "Possible";
        
        N = len(value);
        if N % 2 != 0:
            return impossible

        sum = 0;
        for x in value:
            sum = sum + x;

        if sum % 2 != 0:
            return impossible

        dp = [];
        for i in xrange(N / 2 + 1):
            dp.append(set());

        dp[0].add(0);
        for v in value:
            for i in xrange(N / 2, 0, -1):
                for x in dp[i - 1]:
                    len(dp[i - 1])
                    dp[i].add(x + v);

        if sum / 2 in dp[N / 2]:
            return possible;
        else:
            return impossible;

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = FoxAndSouvenirTheNext()
	startTime = time.clock()
	answer = obj.ableToSplit(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p1) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = (1,2,3,4)
p1 = "Possible"
all_right = (disabled or KawigiEdit_RunTest(0, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = (1,1,1,3)
p1 = "Impossible"
all_right = (disabled or KawigiEdit_RunTest(1, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = (1,1,2,3,5,8)
p1 = "Possible"
all_right = (disabled or KawigiEdit_RunTest(2, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = (2,3,5,7,11,13)
p1 = "Impossible"
all_right = (disabled or KawigiEdit_RunTest(3, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48)
p1 = "Possible"
all_right = (disabled or KawigiEdit_RunTest(4, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)
p1 = "Impossible"
all_right = (disabled or KawigiEdit_RunTest(5, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# Fox Ciel just returned home from her trip to New Fox City.
# She has brought a bunch of souvenirs.
# You are given their values in a tuple (integer) value.
# 
# 
# Now she wants to give each souvenir either to her mother or to her father.
# She would like to divide the souvenirs in a fair way.
# More precisely:
# 
# The total number of souvenirs given to her mother must be the same as the total number of souvenirs given to her father.
# At the same time, the total value of souvenirs given to her mother must be the same as the total value of souvenirs given to her father.
# 
# 
# 
# Return "Possible" if she can reach her goal, and "Impossible" otherwise.
# 
# DEFINITION
# Class:FoxAndSouvenirTheNext
# Method:ableToSplit
# Parameters:tuple (integer)
# Returns:string
# Method signature:def ableToSplit(self, value):
# 
# 
# CONSTRAINTS
# -value will contain between 1 and 50 elements, inclusive.
# -Each element in value will be between 1 and 50, inclusive.
# 
# 
# EXAMPLES
# 
# 0)
# {1,2,3,4}
# 
# Returns: "Possible"
# 
# One valid solution is to give the souvenirs with values 1 and 4 to her mother and the other two to her father. Each parent receives two souvenirs, and as 1+4 = 2+3, the total value is also the same for both parents.
# 
# 1)
# {1,1,1,3}
# 
# Returns: "Impossible"
# 
# There is no valid solution. Note that {1,1,1} and {3} is not a valid way to split the souvenirs: even though the total value is the same, the number of souvenirs is not.
# 
# 2)
# {1,1,2,3,5,8}
# 
# Returns: "Possible"
# 
# We have 1+1+8 = 2+3+5.
# 
# 3)
# {2,3,5,7,11,13}
# 
# Returns: "Impossible"
# 
# The sum of values is an odd number, so it is impossible.
# 
# 4)
# {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48}
# 
# Returns: "Possible"
# 
# 
# 
# 5)
# {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50}
# 
# Returns: "Impossible"
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!

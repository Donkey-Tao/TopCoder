#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class PublicTransit {
public:
	int minimumLongestDistance(int R, int C) {
		int res = 100000000;
		for (int r1 = 0; r1 < R; r1++) {
		for (int c1 = 0; c1 < C; c1++) {
		for (int r2 = 0; r2 < R; r2++) {
		for (int c2 = 0; c2 < C; c2++) {
			int D = 0;
		for (int r3 = 0; r3 < R; r3++) {
		for (int c3 = 0; c3 < C; c3++) {
		for (int r4 = 0; r4 < R; r4++) {
		for (int c4 = 0; c4 < C; c4++) {
			int d = min( abs(r3-r4) + abs(c3-c4), abs(r3-r1)+abs(c3-c1)+abs(r4-r2)+abs(c4-c2) );
			d = min( d, abs(r3-r2)+abs(c3-c2)+abs(r4-r1)+abs(c4-c1) );
			D = max(D, d);
		}
		}
		}
		}
			res = min(res, D);
		}
		}
		}
		}
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	PublicTransit *obj;
	int answer;
	obj = new PublicTransit();
	clock_t startTime = clock();
	answer = obj->minimumLongestDistance(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	if (hasAnswer) {
		res = answer == p2;
	}
	cout << "Test " << testNum << " ";
	if (!res) {
		cout << "failed." << endl;
		cout << "expected: ";
		cout << "\t" << p2 << endl;
		cout << "received: ";
		cout << "\t" << answer << endl;
		cout << "" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "passed.      ";
		cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds";
		cout << "" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 10;
	p1 = 10;
	p2 = 13;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 2;
	p1 = 2;
	p2 = 1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 5;
	p1 = 3;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 8;
	p1 = 2;
	p2 = 4;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		cout << "" << endl;
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!

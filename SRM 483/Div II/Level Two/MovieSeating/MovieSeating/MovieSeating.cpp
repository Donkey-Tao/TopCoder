#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <climits>
#include <cmath>

using namespace std;

// split, auto generated by FileEdit
vector<string> split( const string& s, const string& delim =" " ) {
    vector<string> res;
    string t;
    for ( int i = 0 ; i != s.size() ; i++ ) {
	if ( delim.find( s[i] ) != string::npos ) {
	    if ( !t.empty() ) {
		res.push_back( t );
		t = "";
	    }
	} else {
	    t += s[i];
	}
    }
    if ( !t.empty() ) {
	res.push_back(t);
    }
    return res;
}

vector<int> splitInt( const string& s, const string& delim =" " ) {
    vector<string> tok = split( s, delim );
    vector<int> res;
    for ( int i = 0 ; i != tok.size(); i++ )
	res.push_back( atoi( tok[i].c_str() ) );
    return res;
}
// split, auto generated by FileEdit

// BEGIN CUT HERE
#define ARRSIZE(x) (sizeof(x)/sizeof(x[0]))

template<typename T> void print( T a ) {
    cerr << a;
}
static void print( long long a ) {
    cerr << a << "L";
}
static void print( string a ) {
    cerr << '"' << a << '"';
}
template<typename T> void print( vector<T> a ) {
    cerr << "{";
    for ( int i = 0 ; i != a.size() ; i++ ) {
	if ( i != 0 ) cerr << ", ";
	print( a[i] );
    }
    cerr << "}" << endl;
}
template<typename T> void eq( int n, T have, T need ) {
    if ( have == need ) {
	cerr << "Case " << n << " passed." << endl;
    } else {
	cerr << "Case " << n << " failed: expected ";
	print( need );
	cerr << " received ";
	print( have );
	cerr << "." << endl;
    }
}
template<typename T> void eq( int n, vector<T> have, vector<T> need ) {
    if( have.size() != need.size() ) {
	cerr << "Case " << n << " failed: returned " << have.size() << " elements; expected " << need.size() << " elements.";
	print( have );
	print( need );
	return;
    }
    for( int i= 0; i < have.size(); i++ ) {
	if( have[i] != need[i] ) {
	    cerr << "Case " << n << " failed. Expected and returned array differ in position " << i << ".";
	    print( have );
	    print( need );
	    return;
	}
    }
    cerr << "Case " << n << " passed." << endl;
}
static void eq( int n, string have, string need ) {
    if ( have == need ) {
	cerr << "Case " << n << " passed." << endl;
    } else {
	cerr << "Case " << n << " failed: expected ";
	print( need );
	cerr << " received ";
	print( have );
	cerr << "." << endl;
    }
}
// END CUT HERE

/************** Program  Begin *********************/

/**
 * calculate A(m, n)
 */
long long calc(int m, int n)
{
	long long sum = 1;
	for (int i = 1; i <= m; i++) {
		sum *= n;
		--n;
	}
	return sum;
}

class MovieSeating {
public:
    long long getSeatings(int numFriends, vector <string> hall) {
	long long res = 0;

	for (int i = 0; i < hall.size(); i++) {
		int seats = 0;
		for (int j = 0; j < hall[i].size(); j++) {
			if ('.' == hall[i][j]) {
				++seats;
			}
		}
		if (seats >= numFriends) {
			res += calc(numFriends, seats);
		}
	}
	if (numFriends > 1) {
		for (int i = 0; i < hall[0].size(); i++) {
			int seats = 0;
			for (int j = 0; j < hall.size(); j++) {
				if ('.' == hall[j][i]) {
					++seats;
				}
			}
			if (seats >= numFriends) {
				res += calc(numFriends, seats);
			}
		}
	}

	return res;
    }
};

/************** Program End ************************/

// BEGIN CUT HERE
void main( int argc, char* argv[] ) {
    {
	string hallARRAY[] = { ".#..",
	     ".##.",
	     "...." };
	vector <string> hall( hallARRAY, hallARRAY+ARRSIZE(hallARRAY) );
	MovieSeating theObject;
	eq(0, theObject.getSeatings(2, hall),34LL);
    }
    {
	string hallARRAY[] = { "..#",
	     ".##",
	     "..." };
	vector <string> hall( hallARRAY, hallARRAY+ARRSIZE(hallARRAY) );
	MovieSeating theObject;
	eq(1, theObject.getSeatings(2, hall),16LL);
    }
    {
	string hallARRAY[] = { "..####..", 
	     ".###.##.",
	     ".######.",
	     "#.#.#.#." };
	vector <string> hall( hallARRAY, hallARRAY+ARRSIZE(hallARRAY) );
	MovieSeating theObject;
	eq(2, theObject.getSeatings(5, hall),0LL);
    }
    {
	string hallARRAY[] = { "........" };
	vector <string> hall( hallARRAY, hallARRAY+ARRSIZE(hallARRAY) );
	MovieSeating theObject;
	eq(3, theObject.getSeatings(8, hall),40320LL);
    }
}
// END CUT HERE

<html><body bgcolor="#000000" text="#ffffff"><table><tr><td colspan="2"><h3>Problem Statement</h3></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><p>
<i>Note that in this problem you are given a vector &lt;int&gt; that can contain up to 200 elements.
You should also be able to submit test cases of this size during the Challenge phase of this SRM.</i>
</p>
<p>
</p>
<p>
Alien Fred wants to destroy the Earth.
But before he does that, he wants to play with a permutation.
</p>
<p>
</p>
<p>
Fred has a permutation of all the integers between 1 and N, inclusive.
You are given a vector &lt;int&gt; <b>P</b> of size N.
For each i, the i-th element (0-based index) of <b>P</b> represents the i-th element (again, 0-based index) of Fred's permutation.
</p>
<p>
</p>
<p>
Fred will now make a sequence of changes to <b>P</b>.
Each change will look as follows:
Fred will select a contiguous non-empty segment of <b>P</b>, and change all of its elements to the largest one among them.
(Note that after such a change <b>P</b> will most likely stop being a permutation. This is allowed.)
</p>
<p>
</p>
<p>
You are also given an int <b>K</b>.
Fred is allowed to make at most <b>K</b> consecutive changes to <b>P</b>.
He is allowed to make fewer than <b>K</b> changes if he wants to, including the possibility to make no changes at all.
</p>
<p>
</p>
<p>
Let X be the total number of different sequences he can produce at the end of the above process.
Return the value (X modulo 1,000,000,007).
</p></td></tr><tr><td colspan="2"><h3>Definition</h3></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td>Class:</td><td>AlienAndPermutation</td></tr><tr><td>Method:</td><td>getNumber</td></tr><tr><td>Parameters:</td><td>vector &lt;int&gt;, int</td></tr><tr><td>Returns:</td><td>int</td></tr><tr><td>Method signature:</td><td>int getNumber(vector &lt;int&gt; P, int K)</td></tr><tr><td colspan="2">(be sure your method is public)</td></tr></table></td></tr><tr><td colspan="2"><h3>Limits</h3></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td>Time limit (s):</td><td>2.000</td></tr><tr><td>Memory limit (MB):</td><td>256</td></tr></table></td></tr><tr><td colspan="2"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top">-</td><td><b>P</b> will contain between 1 and 200 elements, inclusive.</td></tr><tr><td align="center" valign="top">-</td><td><b>P</b> will represent a permutation of integers between 1 and N, inclusive, where N is the number of elements in <b>P</b>.</td></tr><tr><td align="center" valign="top">-</td><td><b>K</b> will be between 0 and 200, inclusive.</td></tr><tr><td colspan="2"><h3>Examples</h3></td></tr><tr><td align="center" nowrap="true">0)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>{1, 2}</pre></td></tr><tr><td><pre>1</pre></td></tr></table></td></tr><tr><td><pre>Returns: 2</pre></td></tr><tr><td><table><tr><td colspan="2">The following two sequences are possible in this case: (1, 2) and (2, 2).</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">1)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>{3, 1, 2}</pre></td></tr><tr><td><pre>2</pre></td></tr></table></td></tr><tr><td><pre>Returns: 4</pre></td></tr><tr><td><table><tr><td colspan="2">Four sequences are possible in this case:
<ul>
<li>
(3, 1, 2)
</li>
<li>
(3, 2, 2)
</li>
<li>
(3, 3, 2)
</li>
<li>
(3, 3, 3)
</li>
</ul></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">2)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>{4, 3, 2, 1}</pre></td></tr><tr><td><pre>2</pre></td></tr></table></td></tr><tr><td><pre>Returns: 13</pre></td></tr><tr><td><table><tr><td colspan="2"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">3)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>{1, 7, 2, 3, 6, 4, 5}</pre></td></tr><tr><td><pre>3</pre></td></tr></table></td></tr><tr><td><pre>Returns: 77</pre></td></tr><tr><td><table><tr><td colspan="2"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">4)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}</pre></td></tr><tr><td><pre>12</pre></td></tr></table></td></tr><tr><td><pre>Returns: 379796836</pre></td></tr><tr><td><table><tr><td colspan="2"></td></tr></table></td></tr></table></td></tr></table><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2003, TopCoder, Inc.  All rights reserved.  </p></body></html>

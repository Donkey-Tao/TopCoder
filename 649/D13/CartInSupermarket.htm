<html><body bgcolor="#000000" text="#ffffff"><table><tr><td colspan="2"><h3>Problem Statement</h3></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td>You have one or more sequences of shopping carts.
You are given the lengths of these sequences in a vector &lt;int&gt; <b>a</b>.
You are going to remove all the shopping carts.<br></br><br></br>

The process of removing the carts will consist of one or more turns.
Each turn will take exactly one minute.
At the beginning of each turn, you will have some sequences of carts.
For each of those sequences you can choose between two options:
<ul>
<li>split it (in an arbitrary place) into two shorter sequences</li>
<li>remove one shopping cart from the sequence</li>
</ul><br></br><br></br>

There is one additional constraint: during the entire process you can only choose to split a sequence at most <b>b</b> times.<br></br><br></br>

You are given vector &lt;int&gt; <b>a</b> and int <b>b</b>.
Compute and return the smallest number of minutes in which it is possible to remove all the carts.</td></tr><tr><td colspan="2"><h3>Definition</h3></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td>Class:</td><td>CartInSupermarket</td></tr><tr><td>Method:</td><td>calcmin</td></tr><tr><td>Parameters:</td><td>vector &lt;int&gt;, int</td></tr><tr><td>Returns:</td><td>int</td></tr><tr><td>Method signature:</td><td>int calcmin(vector &lt;int&gt; a, int b)</td></tr><tr><td colspan="2">(be sure your method is public)</td></tr></table></td></tr><tr><td colspan="2"><h3>Limits</h3></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td>Time limit (s):</td><td>2.000</td></tr><tr><td>Memory limit (MB):</td><td>256</td></tr><tr><td>Stack limit (MB):</td><td>256</td></tr></table></td></tr><tr><td colspan="2"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top">-</td><td>The number of elements in <b>a</b> will be between 1 and 50, inclusive.<br></br></td></tr><tr><td align="center" valign="top">-</td><td>Each element in <b>a</b> will be between 1 and 1,000,000,000, inclusive.<br></br></td></tr><tr><td align="center" valign="top">-</td><td><b>b</b> will be between 0 and 1,000,000,000, inclusive.</td></tr><tr><td colspan="2"><h3>Examples</h3></td></tr><tr><td align="center" nowrap="true">0)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>{8}</pre></td></tr><tr><td><pre>3</pre></td></tr></table></td></tr><tr><td><pre>Returns: 4</pre></td></tr><tr><td><table><tr><td colspan="2">We have a single sequence of 8 carts and we can use at most 3 splits.
The optimal solution takes 4 minutes.<br></br>
During the first minute split the sequence of 8 carts into two sequences with 4 carts each.<br></br>
During the second minute perform two splits, dividing each of the two 4-cart sequences into two new sequences with 2 carts each.<br></br>
Thus, after the second minute you will have four sequences of 2 carts.<br></br>
In the third minute choose to remove a cart from each of them.
Repeat that choice in the fourth minute and you are done.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">1)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>{6,6,5}</pre></td></tr><tr><td><pre>3</pre></td></tr></table></td></tr><tr><td><pre>Returns: 4</pre></td></tr><tr><td><table><tr><td colspan="2">One optimal solution with only 4 minutes looks as follows:
<ol>
<li>Split each of the first two sequences from 6 to 3+3. Remove a cart from the third sequence, shortening it from 5 to 4. Sequences after the first minute: {3,3,3,3,4}.</li>
<li>Shorten each of the sequences of length 3. Split the sequence of length 4 into 2+2. Sequences after the second minute: {2,2,2,2,2,2}.</li>
<li>Shorten each sequence. Sequences after the third minute: {1,1,1,1,1,1}.</li>
<li>Shorten each sequence again and you are done.</li>
</ol></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">2)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>{12,5,6,2,6,8}</pre></td></tr><tr><td><pre>4</pre></td></tr></table></td></tr><tr><td><pre>Returns: 6</pre></td></tr><tr><td><table><tr><td colspan="2"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">3)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>{15,20,11,13,18,24,25,21,22,10,15,14,19}</pre></td></tr><tr><td><pre>0</pre></td></tr></table></td></tr><tr><td><pre>Returns: 25</pre></td></tr><tr><td><table><tr><td colspan="2"></td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">4)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>{671122748,846444748,84701624,608579554,672060899,967957440,31438849,734849843,376589643,904285209
,80693344,211737743,85405464,444633541,293184188,935462519,146753109,972886045,496631016,601669536
,257574086,958464570,6294570,546189534,668105964,601197313,784337929,921840143,70408284,722040626
,253400894,56411549,811940644,152086353,122638884,776352066,118932182,177589709,538122558,127914469
,523761221,290027568,734517444,819458123,699130727,784698122,810265337,283326309,593596316,368671876}</pre></td></tr><tr><td><pre>6478</pre></td></tr></table></td></tr><tr><td><pre>Returns: 3805054</pre></td></tr><tr><td><table><tr><td colspan="2"></td></tr></table></td></tr></table></td></tr></table><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2003, TopCoder, Inc.  All rights reserved.  </p></body></html>

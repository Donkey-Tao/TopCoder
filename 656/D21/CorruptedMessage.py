import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class CorruptedMessage:
    def reconstructMessage(self, s, k):
        allchs = set(s)

        for d in range(ord('a'), ord('z') + 1):
            x = chr(d)
            t = 0
            for c in s:
                if c != x:
                    t = t + 1
            if t == k:
                return x * len(s)

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, hasAnswer, p2):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("\"") + str(p0) + str("\"") + str(",") + str(p1))
	print(str("]"))
	obj = CorruptedMessage()
	startTime = time.clock()
	answer = obj.reconstructMessage(p0, p1)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p2) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p2
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = "hello"
p1 = 3
p2 = "lllll"
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = "abc"
p1 = 3
p2 = "ddd"
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = "wwwwwwwwwwwwwwwwww"
p1 = 0
p2 = "wwwwwwwwwwwwwwwwww"
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = "ababba"
p1 = 3
p2 = "aaaaaa"
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = "zoztxtoxytyt"
p1 = 10
p2 = "oooooooooooo"
all_right = (disabled or KawigiEdit_RunTest(4, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 5 -----
disabled = False
p0 = "jlmnmiunaxzywed"
p1 = 13
p2 = "mmmmmmmmmmmmmmm"
all_right = (disabled or KawigiEdit_RunTest(5, p0, p1, True, p2) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# PROBLEM STATEMENT
# 
# Your friend just sent you a message.
# The message consisted of one or more copies of the same lowercase letter.
# For example, "aaaaa" and "xxxxxxxxx" are valid messages.
# Unfortunately, on its way to you the message became corrupted: exactly k letters of the original message were changed to some other letters.
# The message you received is s.
# 
# 
# 
# Given the string s and the integer k, reconstruct the original message.
# More precisely, return a string that could have been the original message.
# It is guaranteed that at least one such string will always exist.
# If there are multiple possible answers, you may return any of them.
# 
# 
# DEFINITION
# Class:CorruptedMessage
# Method:reconstructMessage
# Parameters:string, integer
# Returns:string
# Method signature:def reconstructMessage(self, s, k):
# 
# 
# CONSTRAINTS
# -The number of characters in s will be between 1 and 50, inclusive.
# -Each character in s will be a lowercase letter ('a'-'z').
# -k will be between 0 and the length of s, inclusive.
# -At least one possible original message will be consistent with s and k.
# 
# 
# EXAMPLES
# 
# 0)
# "hello"
# 3
# 
# Returns: "lllll"
# 
# The three corrupted characters have 0-based indices 0, 1, and 4.
# 
# 1)
# "abc"
# 3
# 
# Returns: "ddd"
# 
# The original message can't be "aaa", "bbb", or "ccc", since we need to change exactly 3 characters.
# 
# Some other possible answers include "qqq", "xxx", or "ppp".
# 
# 2)
# "wwwwwwwwwwwwwwwwww"
# 0
# 
# Returns: "wwwwwwwwwwwwwwwwww"
# 
# No characters were corrupted.
# 
# 3)
# "ababba"
# 3
# 
# Returns: "aaaaaa"
# 
# "bbbbbb" will also be accepted.
# 
# 4)
# "zoztxtoxytyt"
# 10
# 
# Returns: "oooooooooooo"
# 
# 
# 
# 5)
# "jlmnmiunaxzywed"
# 13
# 
# Returns: "mmmmmmmmmmmmmmm"
# 
# 
# 
# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!

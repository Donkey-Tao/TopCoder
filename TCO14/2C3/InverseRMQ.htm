<html><body bgcolor="#000000" text="#ffffff"><table><tr><td colspan="2"><h3>Problem Statement</h3></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td>The range maximum query (RMQ) problem looks as follows:
You are given a permutation P of the numbers 1 through <b>n</b>, and a sequence of queries.
Each query is a pair of integers (L,R) such that 1 &lt;= L &lt;= R &lt;= <b>n</b>.
The answer to the query is the maximum of the values that occur in P at (1-based) positions L through R, inclusive.
<br></br>
<br></br>
For example, if P is the permutation (3,1,4,2,5), then:
<ul>
<li>The answer to the query (1,2) is max(3,1)=3.</li>
<li>The answer to the query (2,4) is max(1,4,2)=4.</li>
<li>The answer to the query (4,5) is max(2,5)=5.</li>
</ul>
<br></br>
<br></br>
In this problem, we ask you to solve the inverse problem.
You are given the int <b>n</b>, and three vector &lt;int&gt;s <b>A</b>, <b>B</b>, and <b>ans</b>, each containing the same number of elements.
We are looking for a permutation P of numbers 1 through <b>n</b> with the following property:
For each valid i, the answer to the query (<b>A</b>[i], <b>B</b>[i]) must be <b>ans</b>[i].
Return "Possible" (quotes for clarity) if at least one such permutation P exists, and "Impossible" otherwise.</td></tr><tr><td colspan="2"><h3>Definition</h3></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td>Class:</td><td>InverseRMQ</td></tr><tr><td>Method:</td><td>possible</td></tr><tr><td>Parameters:</td><td>int, vector &lt;int&gt;, vector &lt;int&gt;, vector &lt;int&gt;</td></tr><tr><td>Returns:</td><td>string</td></tr><tr><td>Method signature:</td><td>string possible(int n, vector &lt;int&gt; A, vector &lt;int&gt; B, vector &lt;int&gt; ans)</td></tr><tr><td colspan="2">(be sure your method is public)</td></tr></table></td></tr><tr><td colspan="2"><h3>Limits</h3></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td>Time limit (s):</td><td>2.000</td></tr><tr><td>Memory limit (MB):</td><td>256</td></tr></table></td></tr><tr><td colspan="2"><h3>Constraints</h3></td></tr><tr><td align="center" valign="top">-</td><td><b>n</b> will be between 1 and 1,000,000,000, inclusive.</td></tr><tr><td align="center" valign="top">-</td><td><b>A</b> will contain between 1 and 50 elements, inclusive.</td></tr><tr><td align="center" valign="top">-</td><td><b>A</b>, <b>B</b>, and <b>ans</b> will each contain the same number of elements.</td></tr><tr><td align="center" valign="top">-</td><td>Each element in <b>A</b> will be between 1 and <b>n</b>, inclusive.</td></tr><tr><td align="center" valign="top">-</td><td>Each element in <b>B</b> will be between 1 and <b>n</b>, inclusive.</td></tr><tr><td align="center" valign="top">-</td><td>For all i, <b>A</b>[i] will be less than or equal to <b>B</b>[i].</td></tr><tr><td align="center" valign="top">-</td><td>Each element in <b>ans</b> will be between 1 and <b>n</b>, inclusive.</td></tr><tr><td colspan="2"><h3>Examples</h3></td></tr><tr><td align="center" nowrap="true">0)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>5</pre></td></tr><tr><td><pre>{1,2,4}</pre></td></tr><tr><td><pre>{2,4,5}</pre></td></tr><tr><td><pre>{3,4,5}</pre></td></tr></table></td></tr><tr><td><pre>Returns: &quot;Possible&quot;</pre></td></tr><tr><td><table><tr><td colspan="2">This is the example from the problem statement. One valid permutation is (3,1,4,2,5). There are also some other valid permutations.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">1)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>3</pre></td></tr><tr><td><pre>{1,2,3}</pre></td></tr><tr><td><pre>{1,2,3}</pre></td></tr><tr><td><pre>{3,3,3}</pre></td></tr></table></td></tr><tr><td><pre>Returns: &quot;Impossible&quot;</pre></td></tr><tr><td><table><tr><td colspan="2">The only sequence that corresponds to these queries is (3,3,3), but that is not a permutation.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">2)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>600</pre></td></tr><tr><td><pre>{1,101,201,301,401,501}</pre></td></tr><tr><td><pre>{100,200,300,400,500,600}</pre></td></tr><tr><td><pre>{100,200,300,400,500,600}</pre></td></tr></table></td></tr><tr><td><pre>Returns: &quot;Possible&quot;</pre></td></tr><tr><td><table><tr><td colspan="2">One valid permutation is the permutation (1,2,3,...,600).</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">3)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>1000000000</pre></td></tr><tr><td><pre>{1234,1234}</pre></td></tr><tr><td><pre>{5678,5678}</pre></td></tr><tr><td><pre>{10000,20000}</pre></td></tr></table></td></tr><tr><td><pre>Returns: &quot;Impossible&quot;</pre></td></tr><tr><td><table><tr><td colspan="2">There is no permutation such that two identical queries have different answers.</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">4)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>8</pre></td></tr><tr><td><pre>{1,2,3,4,5,6,7,8}</pre></td></tr><tr><td><pre>{1,2,3,4,5,6,7,8}</pre></td></tr><tr><td><pre>{4,8,2,5,6,3,7,1}</pre></td></tr></table></td></tr><tr><td><pre>Returns: &quot;Possible&quot;</pre></td></tr><tr><td><table><tr><td colspan="2">The only valid permutation is clearly (4,8,2,5,6,3,7,1).</td></tr></table></td></tr></table></td></tr><tr><td align="center" nowrap="true">5)</td><td></td></tr><tr><td>&#160;&#160;&#160;&#160;</td><td><table><tr><td><table><tr><td><pre>1000000000</pre></td></tr><tr><td><pre>{1}</pre></td></tr><tr><td><pre>{1000000000}</pre></td></tr><tr><td><pre>{19911120}</pre></td></tr></table></td></tr><tr><td><pre>Returns: &quot;Impossible&quot;</pre></td></tr><tr><td><table><tr><td colspan="2">Obviously, for <b>n</b>=1,000,000,000 the maximum of the entire permutation must be 1,000,000,000.</td></tr></table></td></tr></table></td></tr></table><p>This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2003, TopCoder, Inc.  All rights reserved.  </p></body></html>
